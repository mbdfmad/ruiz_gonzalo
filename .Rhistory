# Por ejemplo para encontrar las posiciones con edades entre 19 y 21
which( (edades >= 19) & (edades <= 21))
# Los operadores lógicos son & para y (es decir AND) y | para o (es decir OR)
# Por ejemplo para encontrar las posiciones con edades entre 19 y 21
edades (which( (edades >= 19) & (edades <= 21)))
# Los operadores lógicos son & para y (es decir AND) y | para o (es decir OR)
# Por ejemplo para encontrar las posiciones con edades entre 19 y 21
edades [which( (edades >= 19) & (edades <= 21))]
table(mpg$cty)
mpg %>% count(cty)
# Tabla de frecuencias relativas
prop.table(table(mpg$cty))
mpg %>% count(cty) %> %
mutate(cty, relFreq = prop.table(n), n=NULL)
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL)
# Tabla de frecuencias relativas
prop.table(table(mpg$cty))
# Frecuencias acumuladas
cumsum(table(mpg$cty))
# Frecuencias acumuladas
sum(prop.table(table(mpg$cty)))
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL)
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL) %>%
cumsum()
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL) %>%
cumsum()
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL) %>%
cumsum()
# Convertir a intervalos
cholLevels = cut(fhs$totChol, breaks = 10)
# Convertir a intervalos
cholLevels = cut(mpg$cty, breaks = 10)
cut(mpg$cty, breaks = 10)
# Convertir a intervalos
cut(mpg$cty, breaks = 10)
table(cut(mpg$cty, breaks = 10))
table(cut(mpg$cty, breaks = 13))
table(cut(mpg$cty, breaks = 11))
table(cut(mpg$cty, breaks = 13))
table(cut(mpg$cty, breaks = 2))
table(cut(mpg$cty, breaks = 7))
table(cut(mpg$cty, breaks = 10))
# Error:  tabla de frecuencia de una v. continua
table(fhs$totChol)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
# Histograma con ggplot2
cortes = seq(min(mpg$cty), max(mpg$cty), length.out = 11)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=3)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=2)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=1)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=0.5)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=0.8)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=0.9)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=1)
# Relación entre curvas de densidad e histogramas.
ggplot(mpg, aes(x = cty)) +
geom_histogram(aes(y=stat(density)),
breaks = cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5,adjust=1.3)
# Summary, p. 13
summary(mpg$cty)
# Valores de posición, p. 13
quantile(mpg$cty, probs = 0.43)
##
quantile(mpg$cty, probs = 0.43)
# Recorrido intercuartílico, p. 16
IQR(mpg$cty)
# Recorrido intercuartílico, p. 16
IQR(mpg$cty)
summary(mpg$cty)
unname(quantile(mpg$cty, probs = c(1/4, 3/4)) + c(-1, 1) * 1.5 * IQR(mpg$cty))
bxp_cty$out
# Boxplot y violinplot con R básico p. 20
ggplot(mpg) +
geom_boxplot(mapping = aes(y = cty), fill="orange")
boxplot(mpg$cty, col="orange")
ggplot(mpg) +
geom_violin(mapping = aes(x=0, y = cty)) +
scale_x_discrete(breaks = c()) +
geom_boxplot(mapping = aes(y = cty), fill="green") +
geom_jitter(aes(x=0, y = cty),
position = position_jitter(w=0.05, h= 0), col="blue")
# Desviación absoluta mediana p. 21
library(readxl)
# Desviación absoluta mediana p. 21
library(readxl)
accidentes = read_excel("./data/train_acc_2010.xls")
mad(accidentes$Speed, constant = 1)
# Varianza y desviación típica p. 24
var(mpg$displ)
n = length(mpg$displ)
media = mean(mpg$displ)
sum((mpg$displ - media)^2) / (n - 1 )
sd(mpg$displ)
sqrt(var(mpg$displ))
ggplot(accidentes) +
geom_bar(mapping = aes(x = TrkType), fill= viridis(5))
library(viridisLite)
ggplot(accidentes) +
geom_bar(mapping = aes(x = TrkType), fill= viridis(5))
poblacion = as.integer(2 * rchisq(N, df = 13), 0)
set.seed(2019)
N = 158000
poblacion = as.integer(2 * rchisq(N, df = 13), 0)
as.integer(2 * rchisq(N, df = 13), 0)
poblacion %>%
as_tibble %>%
ggplot() +
geom_histogram(aes(x = value), bins = 15, fill="orange", color="black") +
geom_vline(xintercept = mean(poblacion),
col="blue", linetype="dashed", size=2)
poblacion %>%
# as_tibble %>%
ggplot() +
geom_histogram(aes(x = value), bins = 15, fill="orange", color="black") +
geom_vline(xintercept = mean(poblacion),
col="blue", linetype="dashed", size=2)
poblacion %>%
# as_tibble %>%
ggplot() +
geom_histogram(aes(x = value), bins = 15, fill="orange", color="black") +
geom_vline(xintercept = mean(poblacion),
col="blue", linetype="dashed", size=2)
poblacion %>%
as_tibble
library(kernlab)
data(spam)
spam[1:4, c(1:10, 58)]
spam %>%
select(order, type) %>%
mutate(hasOrder = factor(order > 0, # Creamos el factor hasOrder
levels = c(TRUE, FALSE),
labels = c("order", "no order")),
type = relevel(type, ref = "spam"), # Reordenamos los niveles
order = NULL) # y elminamos el factor order original
# Librerias
library(tidyverse)
spam %>%
select(order, type) %>%
mutate(hasOrder = factor(order > 0, # Creamos el factor hasOrder
levels = c(TRUE, FALSE),
labels = c("order", "no order")),
type = relevel(type, ref = "spam"), # Reordenamos los niveles
order = NULL) # y elminamos el factor order original
table(spam$hasOrder, spam$type)
table(spam$hasOrder, spam$type)
spam = spam %>%
select(order, type) %>%
mutate(hasOrder = factor(order > 0, # Creamos el factor hasOrder
levels = c(TRUE, FALSE),
labels = c("order", "no order")),
type = relevel(type, ref = "spam"), # Reordenamos los niveles
order = NULL) # y elminamos el factor order original
table(spam$hasOrder, spam$type)
# Función sample
muestra = sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Función sample
sample(0:3, size = 10, replace = TRUE, prob = c(64, 48, 12, 1))
# Generales
signif(1+1, 4)
# Generales
signif(3/13, 4)
# Generales
signif(3/13, 5)
# Generales
signif(3/13, 4)
# Binomial
dbinom(x = 3, size = 7, prob = 0.4)
pbinom(q = 3, size = 7, prob = p)
pbinom(q = 3, size = 7, prob = 0.4)
pbinom(q = 0:7, size = 7, prob = 0.4)
# Binomial
dbinom(x = 3, size = 7, prob = 0.4)
rbinom(n = 25, size = 7, prob = 0.2)
nc = 0.95
alfa = 1 - nc
qnorm(alfa / 2, lower.tail = FALSE)
qnorm(q=0.2, mean = 3, sd = 1, lower.tail = FALSE)
qnorm(q=0.2, mean = 3, sd=1, lower.tail = FALSE)
qnorm(p=0.2, mean = 3, sd=1, lower.tail = FALSE)
# Normal
pnorm(q=10.5, mean=10, sd=2)
rnorm(n=60,mean = 3, sd=1)
set.seed(2019)
x1 = rnorm(1000)
y1 = rnorm(1000)
ggplot(data.frame(x1, y1)) +
geom_point(mapping = aes(x1, y1), col="red")
x2 = runif(1000, min = -1, max = 1)
y2 = runif(1000, min = -1, max = 1)
ggplot(data.frame(x2, y2)) +
geom_point(mapping = aes(x2, y2), col="blue")
set.seed(2019)
pob1 = rnorm(30000, mean = -3, sd = 1)
pob2 = rnorm(30000, mean = 2, sd = 0.5)
pobSuma = 3 * pob1 + 4 * pob2
plot(density(pobSuma, adjust = 1.6), main="", lwd=5, col="red", xlab="")
y1 = rnorm(1000)
x2 = runif(1000, min = -1, max = 1)
ggplot(data.frame(x2, y1)) +
geom_point(mapping = aes(x2, y1), col="blue")
url =
"https://raw.githubusercontent.com/mbdfmad/fmad2122/main/data/skewdata.csv"
x = pull(read_csv(file = url), 1)
## QQplots.
p1 = ggplot(tibble(x = normales), aes(sample = x)) +
geom_qq(alpha = 0.2, color = "red") +
geom_qq_line() +
ggtitle("Datos normales") +
xlab("") +  ylab("") +
theme(plot.title =
element_text(color="red", size=14, face="bold.italic"))
tamMuestra = 500
normales = scale(rnorm(tamMuestra))
## QQplots.
p1 = ggplot(tibble(x = normales), aes(sample = x)) +
geom_qq(alpha = 0.2, color = "red") +
geom_qq_line() +
ggtitle("Datos normales") +
xlab("") +  ylab("") +
theme(plot.title =
element_text(color="red", size=14, face="bold.italic"))
ggplot(tibble(x = normales), aes(sample = x)) +
geom_qq(alpha = 0.2, color = "red") +
geom_qq_line() +
ggtitle("Datos normales") +
xlab("") +  ylab("") +
theme(plot.title =
element_text(color="red", size=14, face="bold.italic"))
rnorm(tamMuestra)
scale(rnorm(tamMuestra))
boxplot(cty ~ class, data = mpg, col= heat.colors(7),
las=2, cex.axis=0.75, xlab = "")
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty))+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
boxplot(cty ~ class, data = mpg, col= heat.colors(7),
las=2, cex.axis=0.75, xlab = "")
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),col= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),color= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)+xlab(f)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)+xlab("f")
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)+xlab("Class")
Tabla = table(mpg$year, mpg$class)
mosaicplot(Tabla, col=terrain.colors(nlevels(mpg$class)), las = 1)
Tabla = table(mpg$year, mpg$class)
mosaicplot(Tabla, col=terrain.colors(nlevels(mpg$class)), las = 1)
library(lattice)
mpg$class = reorder(mpg$class, mpg$cty, FUN = mean)
dotplot(class ~ cty, data = mpg, lwd= 2)
Tabla = table(mpg$year, mpg$class)
mosaicplot(Tabla, col=terrain.colors(nlevels(mpg$class)), las = 1)
# Recta de regresión
lm(y~x ,data=mpg$cty)
n <- 100
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
modelo = lm(y ~ x)
abline(lm(y ~ x))
plot(lm(y ~ x), which = 5, pch=19)
n <- 100
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
modelo = lm(y ~ x)
modelo = lm(cty ~ hwy, data = mpg)
modelo$coefficients
plt +
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
plt
plt +
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
b0 = modelo$coefficients[1]
b1 = modelo$coefficients[2]
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
ggplot(mpg) +
geom_point(aes(hwy, cty), col = "darkgreen")+
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
modelo$coefficients
b0 = modelo$coefficients[1]
b1 = modelo$coefficients[2]
## Gráfica
ggplot(mpg) +
geom_point(aes(hwy, cty), col = "darkgreen")+
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
# Recta de regresión
## Modelo
modelo = lm(cty ~ poly(hwy, 1), data = mpg)
modelo$coefficients
b0 = modelo$coefficients[1]
b1 = modelo$coefficients[2]
## Gráfica
ggplot(mpg) +
geom_point(aes(hwy, cty), col = "darkgreen")+
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
modelo = lm(cty ~ hwy, data = mpg)
modelo$coefficients
b0 = modelo$coefficients[1]
b1 = modelo$coefficients[2]
ggplot(mpg) +
geom_point(aes(hwy, cty), col = "darkgreen")+
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
# Regresión logística
model=glm(cty ~ hwy, family = binomial, data =mpg )
mpg
summary(CHDdata)
setwd("~/Documents/Master Big Data/FMAD/fmad2122")
CHDdata <-  read_delim("./data/CHDAGE.txt", delim = "\t")
CHDdata %>% slice_head(n = 6)
summary(CHDdata)
AGEbreaks = c(20, seq(from = 30, to = 60, by = 5), 70)
CHDdata <- CHDdata %>%
mutate(AgeGroup = cut(AGE, breaks = AGEbreaks, right = FALSE))
CHDdata
options(width = 80)
(tabla1 = as.matrix(table(CHDdata$CHD, CHDdata$AgeGroup)))
(sumaColumnas = colSums(tabla1))
tabla1
# ...para pensar en términos de probabilidades.
(probs = signif(tabla1[2, ] / sumaColumnas, 2))
midpoints = AGEbreaks[-length(AGEbreaks)] + c(5, rep(2.5, 6), 5)
probsdf = data.frame(midpoints, probs)
ggplot(CHDdata) +
geom_point(aes(x = AGE, y = CHD, size=4),
show.legend=FALSE,
position = position_jitter(w = 0, h = 0.02)) +
geom_hline(yintercept = 0:1,
linetype = "dashed",
color="blue",
size=2) +
geom_point(data = probsdf,
mapping = aes(x = midpoints,
y = probs,
size=4, col="red"),
show.legend=FALSE)
glmCHD = glm(CHD ~ AGE, family = binomial(link = "logit"), CHDdata)
summGlmCHD = summary(glmCHD)
summary(glmCHD)
curvaX = data.frame(AGE = seq(20, 70, length.out = 101))
curvaX = data.frame(AGE = seq(20, 70, length.out = 101))
curvaX = data.frame(AGE = seq(20, 70, length.out = 101))
curvaX = data.frame(AGE = seq(20, 70, length.out = 101))
curvaY = predict(glmCHD, newdata = curvaX, type = "response")
curvaDf = data.frame(AGE = curvaX$AGE, CHD = curvaY)
ggplot(CHDdata) +
geom_point(aes(x = AGE, y = CHD, size=4),
show.legend=FALSE, position = position_jitter(w = 0, h = 0.02)) +
geom_hline(yintercept = 0:1, linetype = "dashed", color="blue", size=2) +
geom_line(data = curvaDf, aes(x = AGE, y = CHD, col= "red", size=3),
show.legend=FALSE)
rm(list=ls()) # Borra todos los objetos del entorno
rstudioapi::restartSession() # Reinicia la sesión de R
cat("\014")
# Librerias
library(tidyverse)
# Tabla de frecuencias absoluta
table(mpg$cty)
mpg %>% count(cty)
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL)
# Convertir a intervalos
cut(mpg$cty, breaks = 10)
# Frecuencias acumuladas
cumsum(table(mpg$cty))
mpg %>% count(cty) %>%
mutate(cty, relFreq = prop.table(n), n=NULL) %>%
cumsum()
## Percentil
quantile(mpg$cty, probs = 0.43)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "g", conf.level = 0.95)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "big", conf.level = 0.95)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "greater", conf.level = 0.95)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "lower", conf.level = 0.95)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "less", conf.level = 0.95)
# Contraste hipótesis para la media
t.test((mpg$cty),mu= 16.39952,
alternative = "greater", conf.level = 0.95)
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
# Una variable continua $X$ y un factor $F$
boxplot(cty ~ class, data = mpg, col= heat.colors(7),
las=2, cex.axis=0.75, xlab = "")
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)+xlab("Class")
boxplot(cty ~ class, data = mpg, col= heat.colors(7),
las=2, cex.axis=0.75, xlab = "")
stripchart(cty ~ class, data = mpg, method = "jitter",
vertical = TRUE, pch = 19, col = "red", cex=0.3, add = TRUE)
# curvas de densidad por grupos
ggplot(mpg) +
geom_density(aes(x = cty, color = class))
ggplot(mpg) + geom_boxplot(mapping=aes(reorder(class,X=cty, FUN=median),y=cty),fill= heat.colors(7) )+
geom_jitter(aes(x=class,y=cty),width = 0.1,alpha=0.5)+xlab("Class")
modelo = lm(cty ~ hwy, data = mpg)
modelo$coefficients
b0 = modelo$coefficients[1]
b1 = modelo$coefficients[2]
## Gráfica
ggplot(mpg) +
geom_point(aes(hwy, cty), col = "darkgreen")+
geom_abline(intercept = b0, slope = b1, color="blue", size = 1.5)
## Resumen modelo
summary(modelo)
## Bondad Ajuste
plot(modelo,which = 1:3)
plot(modelo,which = 1:3)
plot(modelo,which = 1:5)
plot(modelo,which = 1:5)
